{"version":3,"sources":["helpers.ts","parsedData.ts","context.tsx","components/Header.tsx","components/LangItem.tsx","components/LangList.tsx","components/Metric.tsx","components/Plot.tsx","components/App.tsx","index.tsx"],"names":["clx","args","filter","e","join","objectEntries","Object","entries","keyOn","key","items","result","item","keyVal","list","push","tableToItems","table","keys","rows","map","row","assign","index","chooseColor","name","hash","murmur3","color","hue","saturation","sums","keyed","tables","dates","sort","colors","data","values","points","point","sum","date","normalize","reduce","x","y","mean","length","putMean","p","value","console","warn","fillDates","defaultState","searchTerm","trimmed","metricsAreExpanded","metric","langList","selectedLangs","Set","highlighed","undefined","noopFuncs","updateSearchTerm","toggleTrimmed","toggleMetricsAreExpanded","emptyList","resetList","changeMetric","toggleSelected","setHighlighted","GlobalContext","React","createContext","useGlobal","useContext","GlobalProvider","Component","constructor","props","super","state","this","setState","prevState","clear","i","add","constructList","has","delete","render","Provider","children","queueMicrotask","loadUrlParams","getRanks","offset","counts","stats","slice","a","b","currRank","rank","currentRanks","oldRanks","oldRanksMap","prev","curr","worstRank","Math","min","ele","diff","window","location","params","URLSearchParams","get","names","split","size","lang","toLowerCase","Header","global","showMessage","setShowMessage","useState","className","href","title","width","height","viewBox","style","fill","position","top","border","left","transform","aria-hidden","d","transformOrigin","onClick","preventDefault","append","url","URL","String","textarea","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","setTimeout","copyLink","customNames","raku","customTopics","LangItem","memo","onMouseOver","onMouseOut","selected","lowerCaseName","customName","customTopic","replace","data-name","backgroundColor","target","encodeURIComponent","LangList","inputRef","useRef","langsToRender","useMemo","lowerCaseSearchTerm","includes","useLayoutEffect","handleType","event","current","stopPropagation","test","focus","addEventListener","removeEventListener","ref","onChange","Metric","issues","pulls","pushes","stars","real","display","makeDataset","borderColor","cubicInterpolationMode","entry","hoverBorderColor","hoverBorderWidth","pointHoverBackgroundColor","label","pointBackgroundColor","Plot","canvasRef","chart","context","getContext","Chart","datasets","labels","options","animation","duration","hover","animationDuration","mode","legend","maintainAspectRatio","responsive","scales","xAxes","ticks","callback","fontColor","yAxes","suggestedMin","tooltips","bodyFontSize","callbacks","datasetIndex","Number","toFixed","labelColor","titleFontSize","titleFontStyle","type","useEffect","available","update","borderWidth","App","ReactDOM","getElementById"],"mappings":"gjrKAEO,SAASA,KACXC,GAEH,OAAOA,EAAKC,OAAQC,GAAMA,GAAGC,KAAK,K,OAM7B,MAAMC,EAAgBC,OAAOC,Q,kBCqCpC,SAASC,EACPP,GAEA,IAAI,IAAEQ,EAAF,MAAOC,GAAUT,EACjBU,EAAS,GACb,IAAK,IAAIC,KAAQF,EAAO,CACtB,IAAIG,EAAUD,EAAKH,GACfK,EAAOH,EAAOE,GACbC,IACHH,EAAOE,GAAUC,EAAO,IAE1BA,EAAKC,KAAKH,GAEZ,OAAOD,EA8ET,SAASK,EACPC,GAEA,IAAI,KAAEC,EAAF,KAAQC,GAASF,EASrB,OARYE,EAAKC,IAAKC,GACpBf,OAAOgB,OACL,MACGJ,EAAKE,IAAI,CAACX,EAAKc,KACT,CAAE,CAACd,GAAMY,EAAIE,QAY5B,SAASC,EAAYC,GAEnB,IAAIC,EAAOC,kBAAQF,EAAM,IAGzB,MAIQ,QADWG,EAHA,CAAEC,IAFV,KAAQH,GAAQ,GAAM,OAAW,MAElBI,WADT,KAAO,GAAO,IAAc,MAAPJ,GAAkB,SAKpCG,QAAQD,EAAME,oBADpC,IAAqBF,EAIrB,IAAIG,GAzIqBC,EA0IvBxB,EAAM,CACJC,IAAK,OACLC,MAAOM,EAAaiB,EAAOF,QA3ItBzB,OAAOgB,OACZ,MACGhB,OAAOY,KAAKc,GAAOZ,IAAKX,IAClB,CAAE,CAACA,GAAMuB,EAAMvB,GAAK,QAJjC,IAAyBuB,EA+IzB,IAAIE,EAAQ5B,OAAOY,KAAKa,GAAMI,OAC1B5B,EAAUC,EAAM,CAClBC,IAAK,OACLC,MAAOM,EAAaiB,EAAOvB,SAEzB0B,EAAS9B,OAAOgB,OAClB,MACGhB,OAAOY,KAAKX,GAASa,IAAKK,IACpB,CAAE,CAACA,GAAOD,EAAYC,OAG7BY,EAAO,CAAED,SAAQF,QAAO3B,UAASwB,SApFrC,UAAmB,QAAExB,EAAF,KAAWwB,IAC5B,IAAIb,EAAOZ,OAAOY,KAAKZ,OAAOgC,OAAOP,GAAM,IAAI7B,OAC5CO,GAAgB,SAARA,GAEX,IAAK,IAAI8B,KAAUjC,OAAOgC,OAAO/B,GAC/B,IAAK,IAAIiC,KAASD,EAAQ,CACxB,IAAIE,EAAMV,EAAKS,EAAME,MACrB,IAAK,IAAIjC,KAAOS,EACbsB,EAAM/B,GACJ,IAAO+B,EAAM/B,GAAoBgC,EAAIhC,IA6EhDkC,CAAUN,GAvEV,UAAiB,QAAE9B,EAAF,KAAWwB,IAC1B,IAAIb,EAAOZ,OAAOY,KAAKZ,OAAOgC,OAAOP,GAAM,IAAI7B,OAC5CO,GAAgB,SAARA,GAEX,IAAK,IAAI8B,KAAUjC,OAAOgC,OAAO/B,GAC/B,IAAK,IAAIiC,KAASD,EAAQ,CACxB,IAAIE,EAAOvB,EAAKE,IAAKX,GAAQ+B,EAAM/B,IAAmBmC,OACpD,CAACC,EAAGC,IAAMD,EAAIC,EACd,GAEFN,EAAMO,KAAON,EAAMvB,EAAK8B,QA8D9BC,CAAQZ,GA/HR,UAAmB,MAAEH,EAAF,QAAS3B,IAC1B,IAAK,IAAKkB,EAAMc,KAAWjC,OAAOC,QAAQA,GACxC,GAAIgC,EAAOS,SAAWd,EAAMc,OAAQ,CAElC,IAAIrC,EAAS,GACTuC,EAAI,EACR,IAAK,IAAIR,KAAQR,EAAO,CACtB,IAAIM,EAAeD,EAAOW,IACrBV,GAASA,EAAME,KAAOA,GAEzBF,EAAQlC,OAAOgB,OACb,MACGhB,OAAOC,QAAQgC,EAAO,IAAInB,IAAI,EAAEX,EAAK0C,KAC1B,SAAR1C,EACK,CAAEiC,QAEF,CAAE,CAACjC,GAAuB,kBAAV0C,EAAqB,EAAIA,KAItDX,EAAME,KAAOA,IAGTF,EAAME,OAASA,GAIjBU,QAAQC,KAAK,sBAEfH,GAAK,GAGPvC,EAAOI,KAAKyB,GAGdjC,EAAQkB,GAAQd,GAgGtB2C,CAAUjB,G,WC9LV,MAAMkB,EAAe,CACnBC,WAAY,GACZC,SAAS,EACTC,oBAAoB,EACpBC,OAAQ,OACRC,SAAU,GAIVC,cAAe,IAAIC,IACnBC,gBAAYC,GAIRC,EAAY,CAChBC,iBAAiBV,KACjBW,kBACAC,6BACAC,cACAC,cACAC,aAAaZ,KACba,eAAe/C,KACfgD,eAAehD,MAGJiD,EAAgBC,IAAMC,cAAc,IAC5CrB,KACAU,IAGQY,EAAY,IAAMC,YAAWJ,GAEnC,MAAMK,UAAuBJ,IAAMK,UAGxCC,YAAYC,GACVC,MAAMD,GADe,KAFvBE,MAAQ7B,EAEe,KAavBW,iBAAoBV,GAClB6B,KAAKC,SAAS,CACZ9B,aACAC,SAAS,IAhBU,KAmBvBU,cAAgB,IACdkB,KAAKC,SAAUC,IAAD,CACZ/B,WAAY,GACZC,SAAU8B,EAAU9B,WAtBD,KAyBvBW,yBAA2B,IACzBiB,KAAKC,SAAUC,IAAD,CACZ7B,oBAAqB6B,EAAU7B,sBA3BZ,KA8BvBW,UAAY,IACVgB,KAAKC,SAAUC,IACbA,EAAU1B,cAAc2B,QACjBD,IAjCY,KAoCvBjB,UAAY,IACVe,KAAKC,SAAUC,IAEbA,EAAU1B,cAAc2B,QAExB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,EAAU1B,cAAc6B,IAAIL,KAAKD,MAAMxB,SAAS6B,GAAGhE,MAGrD,MAAO,IACF8D,EACH/B,WAAY,MA/CK,KAmDvBe,aAAgBZ,GACd0B,KAAKC,SAAS,CAAE3B,UAAU0B,KAAKM,eApDV,KAsDvBnB,eAAkB/C,GAChB4D,KAAKC,SAAUC,IACTA,EAAU1B,cAAc+B,IAAInE,GAC9B8D,EAAU1B,cAAcgC,OAAOpE,GAE/B8D,EAAU1B,cAAc6B,IAAIjE,GAEvB,CAAEoC,cAAe0B,EAAU1B,iBA7Df,KAiEvBY,eAAkBhD,GAAkB4D,KAAKC,SAAS,CAAEvB,WAAYtC,IAjEzC,KAmEvBqE,OAAS,IACP,kBAACpB,EAAcqB,SAAf,CACE5C,MAAO,IACFkC,KAAKD,MACRlB,iBAAkBmB,KAAKnB,iBACvBC,cAAekB,KAAKlB,cACpBC,yBAA0BiB,KAAKjB,yBAC/BC,UAAWgB,KAAKhB,UAChBC,UAAWe,KAAKf,UAChBC,aAAcc,KAAKd,aACnBC,eAAgBa,KAAKb,eACrBC,eAAgBY,KAAKZ,iBAGtBY,KAAKH,MAAMc,UA7EdC,eAAe,KACbZ,KAAKM,gBACLM,eAAe,KACbZ,KAAKf,YACL2B,eAAe,IAAMZ,KAAKa,qBA6ExBP,gBACN,MAAMQ,EAAW,CAACC,EAAS,KACzB,MAAMC,EAAShG,EAAcE,GAC1Ba,IAAI,EAAEK,EAAM6E,MAAR,CACH7E,OACA0B,MAAOmD,EAAMC,OAAOH,GAAQ,GAAGf,KAAKD,MAAMzB,WAE3CxB,KAAK,CAACqE,EAAGC,IAAMA,EAAEtD,MAAQqD,EAAErD,OAE9B,IAAIuD,EAqBJ,OApBcL,EAAOjF,IAAI,EAAGK,OAAM0B,SAASsC,KACzC,IAAIkB,EAaJ,OAREA,EADQ,IAANlB,EACK,EACEY,EAAOZ,EAAI,GAAGtC,QAAUA,EAC1BuD,EAEAA,EAAW,EAEpBA,EAAWC,EAEJ,CACLlF,OACAkF,WAOAC,EAAeT,IACfU,EAAWV,EAAS,GACpBW,EAAuCD,EAASjE,OACpD,CAACmE,EAAMC,KAAP,IAAsBD,EAAM,CAACC,EAAKvF,MAAOuF,EAAKL,OAC9C,IAGIM,EAAYC,KAAKC,IACrBN,EAASA,EAAS7D,OAAS,GAAG2D,KAC9BC,EAAaA,EAAa5D,OAAS,GAAG2D,MAGlC/C,EAAWgD,EAAaxF,IAAKgG,IAAD,IAC7BA,EACHxF,MAAOQ,EAAOgF,EAAI3F,MAClB4F,KACEH,KAAKC,IAAIL,EAAYM,EAAI3F,MAAOwF,GAChCC,KAAKC,IAAIC,EAAIT,KAAMM,MAGvB5B,KAAKC,SAAS,CAAE1B,aAGVsC,gBAAiB,IAAD,EAEtB,IAAKoB,OAAOC,SAAS7F,KAAM,OAE3B,MAAM8F,EAAS,IAAIC,gBAAgBH,OAAOC,SAAS7F,KAAK6E,MAAM,IAGxD5C,EAAS6D,EAAOE,IAAI,KACtB/D,GACF0B,KAAKd,aAAaZ,GAIpB,MAAMgE,EAAQ,IAAI7D,IAAJ,UAAQ0D,EAAOE,IAAI,gBAAnB,aAAQ,EAAqBE,MAAM,MACjD,GAAmB,IAAfD,EAAME,KAAY,CACpBxC,KAAKhB,YAEL,IAAK,MAAMyD,KAAQzC,KAAKD,MAAMxB,SACxB+D,EAAM/B,IAAIkC,EAAKrG,KAAKsG,gBACtB1C,KAAKb,eAAesD,EAAKrG,MAM/B6F,OAAOC,SAAS7F,KAAO,GAEvB2D,KAAKC,SAAS,CAAE7B,SAAS,K,UCxGduE,MApGA,KACb,MAAMC,EAASpD,KACRqD,EAAaC,GAAkBC,aAAS,GAwB/C,OACE,yBAAKC,UAAU,UACb,6BACE,uBACEC,KAAK,uCACLD,UAAU,gBACVE,MAAM,gCAEN,yBACEC,MAAM,KACNC,OAAO,KACPC,QAAQ,cACRC,MAAO,CACLC,KAAM,OACNhH,MAAO,OACPiH,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,UAAW,gBAEbC,cAAY,QAEZ,0BAAMC,EAAE,sDACR,0BACEA,EAAE,2LACFP,KAAK,eACLD,MAAO,CAAES,gBAAiB,eAC1Bf,UAAU,aAEZ,0BACEc,EAAE,shBACFP,KAAK,eACLP,UAAU,iBAKlB,4BACE,uBAAGC,KAAK,KAAR,aAEF,4BACE,yBAAKC,MAAM,4CAAX,+BAGA,6CACgB,IACd,uBACED,KAAK,2DACLC,MAAM,8DAFR,+BAQJ,yBAAKF,UAAU,WACdH,GAAe,wCAChB,yBAAKG,UAAU,WACb,uBACEA,UAAU,eACVC,KAAK,IACLe,QAAUlJ,IACRA,EAAEmJ,iBApFK,MACf,MAAM9B,EAAS,IAAIC,gBACbE,EAAQ,IAAIM,EAAOpE,eAAezC,IAAKK,GAASA,EAAKsG,eAC3DP,EAAO+B,OAAO,IAAKtB,EAAOtE,QAC1B6D,EAAO+B,OAAO,QAAS5B,EAAMvH,KAAK,MAElC,MAAMoJ,EAAM,IAAIC,IAAInC,OAAOC,SAASe,MACpCkB,EAAI9H,KAAOgI,OAAOlC,GAGlB,IAAImC,EAAWC,SAASC,cAAc,YACtCF,EAASG,YAAcJ,OAAOF,GAC9BG,EAAShB,MAAME,SAAW,QAC1Be,SAASG,KAAKC,YAAYL,GAC1BA,EAASM,SACTL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,GAE1BxB,GAAe,GACfiC,WAAW,IAAMjC,GAAe,GAAQ,MAkEhCkC,IAEF9B,MAAM,wBAEN,0BAAMF,UAAU,oBC9F1B,MAAMiC,EAAyC,CAC7CC,KAAM,UAGFC,EAA0C,CAC9C,MAAO,MACP,KAAM,SACN,KAAM,SACN,KAAM,QACN,gBAAiB,gBACjB,SAAU,QACV,SAAU,QACV,oBAAqB,oBA8ERC,MAhE2BC,YACxC,EAAGrD,OAAM5F,OAAMkF,OAAM0C,UAASsB,cAAaC,aAAYC,WAAUjJ,YAC/D,MAAMkJ,EAAgBrJ,EAAKsG,cACrBgD,EAAaT,EAAYQ,IAAkBA,EAC3CE,EACJR,EAAaO,IAAeA,EAAWE,QAAQ,KAAM,KAEvD,OACE,wBACE5C,UAAU,cACV6C,YAAWzJ,EACX4H,QAAS,IAAMA,EAAQ5H,GACvBkJ,YAAaE,EAAW,IAAMF,EAAYlJ,QAAQuC,EAClD4G,WAAYC,EAAW,IAAMD,SAAe5G,GAE5C,wBACEqE,UAAWrI,EAAI,SAAU6K,GAAY,UACrClC,MAAOkC,EAAW,CAAEM,gBAAiBvJ,QAAUoC,GAE9C2C,GAEH,wBAAI0B,UAAU,SACX5G,EACD,yBAAK4G,UAAU,QACb,uBACEA,UAAU,UACV+C,OAAO,UACP9C,KAAO,mCAAkC+C,mBACvCP,gBAEFvC,MAAM,iBAEN,0BAAMF,UAAU,iBAElB,uBACEA,UAAU,UACVC,KAAO,6BAA4B+C,mBACjCL,QACKK,mBAAmBN,KAC1BxC,MAAM,gBAEN,0BAAMF,UAAU,iBAElB,uBACEA,UAAU,UACV+C,OAAO,UACP9C,KAAO,+BAA8B+C,mBACnCN,iBAEFxC,MAAM,mBAEN,0BAAMF,UAAU,wBAItB,wBAAIA,UAAU,SAASE,MAAM,oCAC1BlB,EAAO,GAAK,IACH,IAATA,GAAcA,MCyCViE,MA1HE,KACf,MAAMrD,EAASpD,IACT0G,EAAWC,YAAgC,MAE3CC,EAAgBC,YAAQ,KAC5B,MAAMC,EAAsB1D,EAAOzE,WAAWuE,cAG9C,OAAIE,EAAOxE,QACFwE,EAAOrE,SAAS1D,OACpB4H,GACCG,EAAOpE,cAAc+B,IAAIkC,EAAKrG,OAC9BqG,EAAKrG,KAAKsG,cAAc6D,SAASD,IAKhC1D,EAAOrE,SAAS1D,OAAQ4H,GAC7BA,EAAKrG,KAAKsG,cAAc6D,SAASD,KAElC,CACD1D,EAAOxE,QACPwE,EAAOpE,cACPoE,EAAOrE,SACPqE,EAAOzE,aAoCT,OAhCAqI,YAAgB,KACd,MAAMC,EAAcC,IAElB,GAAIA,EAAMX,SAAWG,EAASS,QACV,WAAdD,EAAMtL,KACRwH,EAAO/D,iBAAiB,QAErB,CAAC,IAAD,EAGL,OAFA6H,EAAMzC,iBACNyC,EAAME,kBACEF,EAAMtL,KACZ,IAAK,YACL,IAAK,SACL,IAAK,SACHwH,EAAO/D,iBAAiB,IACxB,MACF,QAEM,cAAcgI,KAAKH,EAAMtL,MAC3BwH,EAAO/D,iBAAiB6H,EAAMtL,KAIpC,UAAA8K,EAASS,eAAT,SAAkBG,UAMtB,OAFA7E,OAAO8E,iBAAiB,UAAWN,GAE5B,IAAMxE,OAAO+E,oBAAoB,UAAWP,IAClD,CAAC7D,IAGF,yBAAKI,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,WACb,+BACGoD,EAAcrK,IAAK0G,GAClB,kBAAC,EAAD,iBACMA,EADN,CAEErH,IAAKqH,EAAKrG,KACV4H,QAASpB,EAAOzD,eAChBmG,YAAa1C,EAAOxD,eACpBmG,WAAY3C,EAAOxD,eACnBoG,SAAU5C,EAAOpE,cAAc+B,IAAIkC,EAAKrG,cAOpD,yBAAK4G,UAAU,SACb,yBACEA,UAAU,oBACVgB,QAASpB,EAAO5D,UAChBkE,MAAM,iCAHR,SAOA,yBACEF,UAAU,oBACVgB,QAASpB,EAAO3D,UAChBiE,MAAM,0CAHR,SAOA,yBACEF,UAAWrI,EAAI,mBAAoBiI,EAAOxE,SAAW,WACrD4F,QAASpB,EAAO9D,cAChBoE,MAAM,4CAHR,SAQF,2BAAOF,UAAU,SACf,0BACEA,UAAWrI,EACT,aACAiI,EAAOzE,WAAa,aAAe,eAErC6F,QAAS,IAAMpB,EAAO/D,iBAAiB,MAEzC,2BACEoI,IAAKf,EACLhD,MAAM,iBACNpF,MAAO8E,EAAOzE,WACd+I,SAAWpM,GAAM8H,EAAO/D,iBAAiB/D,EAAEiL,OAAOjI,YCnE7CqJ,MAhDA,KACb,MAAMvE,EAASpD,IAGTnE,EAA0C,CAC9C+L,OAAQ,SACR1J,KAAM,aACN2J,MAAO,gBACPC,OAAQ,SACRC,MAAO,SAGT,OACE,oCACE,yBAAKvE,UAAU,SACb,yBACEA,UAAU,qBACVE,MAAM,wBACNc,QAASpB,EAAO7D,0BAEhB,0BAAMiE,UAAU,gBAAsB,IACtC,0BAAMA,UAAU,cAAc3H,EAAMuH,EAAOtE,SAAgB,IAC3D,0BAAM0E,UAAU,kBAGpB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,eACb,sCACA,wBAAIA,UAAU,gBACXhI,EAAcK,GAAOU,IAAI,EAAEyL,EAAMC,KAChC,wBACEzD,QAAS,IAAMpB,EAAO1D,aAAasI,GACnCxE,UAAWrI,EACT,cACA6M,EACA5E,EAAOtE,SAAWkJ,GAAQ,WAG3BC,S,OCtCjB,SAASC,EAAYtL,EAAckC,GACjC,MAAMqJ,EAAc5K,EAAOX,GAE3B,MAAO,CACLuL,cACAC,uBAAwB,WACxB5K,KAAM9B,EAAQkB,GAAML,IAAK8L,GAAUA,EAAMvJ,IACzCiF,MAAM,EACNuE,iBAAkBH,EAClBI,iBAAkB,EAClBC,0BAA2BL,EAC3BM,MAAO7L,EACP8L,qBAAsBP,GAuIXQ,MAnIF,KACX,MAAMvF,EAASpD,IACT4I,EAAYjC,YAAiC,MAC7CkC,EAAQlC,cAoHd,OAjHAK,YAAgB,KACd,IAAK4B,EAAUzB,QAAS,OAExB,MAAM2B,EAAUF,EAAUzB,QAAQ4B,WAAW,MAC7CF,EAAM1B,QAAU,IAAI6B,QAAMF,EAAS,CACjCtL,KAAM,CACJyL,SAAU,GACVC,OAAQ7L,GAEV8L,QAAS,CACPC,UAAW,CACTC,SAAU,KAEZC,MAAO,CACLC,kBAAmB,IACnBC,KAAM,WAERC,OAAQ,CACNxB,SAAS,GAEXyB,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,SAAWlM,GACFA,EAAKkJ,SAAS,MAAQlJ,EAAKuI,QAAQ,KAAM,IAAM,GAExD4D,UAAW,WAKjBC,MAAO,CACL,CAEEH,MAAO,CACLC,SAAWzL,GAAW,GAAEA,KACxB0L,UAAW,QACXE,aAAc,MAKtBC,SAAU,CACRC,aAAc,GAGdC,UAAW,CACT5B,MAAO,CAAC1M,EAAMyB,IACX,GAAEA,EAAKyL,SAAUlN,EAAKuO,cAAe7B,UACrC,GAAE8B,OAAOxO,EAAKuC,OAAOkM,QAAQ,MAChCC,WAAY,CAAC1O,EAAM8M,KAGV,CAAEV,YAAa,QAAS7B,gBAFjBuC,EAAMrL,KAAKyL,SAAUlN,EAAKuO,cACpBnC,eAKxBnE,SAAU,UACV0G,cAAe,GACfC,eAAgB,WAGpBC,KAAM,UAEP,IAGHC,YAAU,KAAO,IAAD,GACd,UAAIhC,EAAM1B,eAAV,aAAI,EAAe3J,KAAKyL,YACtBJ,EAAM1B,QAAQ3J,KAAKyL,SAAW,KAE/B,CAAC7F,EAAOtE,SAGX+L,YACE,KAAO,IAAD,EACJ,KAAI,UAAChC,EAAM1B,eAAP,aAAC,EAAe3J,KAAKyL,UAAU,OAEnC,MAAM6B,EAAY,IAAI7L,IAGtB4J,EAAM1B,QAAQ3J,KAAKyL,SAAWJ,EAAM1B,QAAQ3J,KAAKyL,SAAS5N,OAAQC,IAChEwP,EAAUjK,IAAIvF,EAAEmN,OAAS,IAClBrF,EAAOpE,cAAc+B,IAAIzF,EAAEmN,OAAS,MAG7C,IAAK,MAAM7L,KAAQwG,EAAOpE,cACnB8L,EAAU/J,IAAInE,IACjBiM,EAAM1B,QAAQ3J,KAAKyL,SAAS/M,KAAKgM,EAAYtL,EAAMwG,EAAOtE,SAI9D+J,EAAM1B,QAAQ4D,UAIhB,CAAC3H,EAAOtE,OAAQsE,EAAOpE,cAAcgE,OAIvC6H,YAAU,KAAO,IAAD,EACd,GAAI,UAAChC,EAAM1B,eAAP,aAAC,EAAe3J,KAAKyL,SAAzB,CAEA,IAAK,MAAMhG,KAAQ4F,EAAM1B,QAAQ3J,KAAKyL,SACpChG,EAAK+H,YAAc/H,EAAKwF,QAAUrF,EAAOlE,WAAa,EAAI,EAG5D2J,EAAM1B,QAAQ4D,WACb,CAAC3H,EAAOlE,aAGT,yBAAKsE,UAAU,QACb,yBAAKA,UAAU,WACb,4BAAQiE,IAAKmB,KAEf,yBAAKpF,UAAU,SACb,yBAAKA,UAAU,0BCtHRyH,MApBH,KACV,MAAM7H,EAASpD,IAEf,OACE,yBAAKwD,UAAU,WACb,kBAAC,EAAD,MACA,yBACEA,UAAWrI,EACT,UACAiI,EAAOvE,oBAAsB,qBAG/B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UChBRqM,IAASjK,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF8D,SAASoG,eAAe,W","file":"static/js/main.a403bf58.chunk.js","sourcesContent":["// joins its arguments with a space and ignores falsy ones\n// its a small utility for className\nexport function clx(\n  ...args: (string | false | 0 | null | undefined)[]\n): string {\n  return args.filter((e) => e).join(\" \");\n}\n\n// type-safe Object.entries\n// should be used only on objects you know the keys wont be polluted\n// https://github.com/microsoft/TypeScript/issues/21826#issuecomment-479851685\nexport const objectEntries = Object.entries as <T>(\n  o: T\n) => [Extract<keyof T, string>, T[keyof T]][];\n","// 1:1 port of index.ts from the non-preact version\nimport tables from \"data.json\";\nimport { murmur3 } from \"murmurhash-js\";\n\ninterface CoreMetrics {\n  issues: number;\n  pulls: number;\n  pushes: number;\n  stars: number;\n}\n\nexport interface Metrics extends CoreMetrics {\n  mean: number;\n}\n\ninterface DateMetrics extends Metrics {\n  date: string;\n}\n\ninterface Entry extends DateMetrics {\n  name: string;\n}\n\ntype Keyed<Item> = {\n  [key: string]: Item;\n};\n\ninterface Data {\n  colors: { [name: string]: string };\n  dates: string[];\n  entries: Keyed<Entry[]>;\n  sums: Keyed<DateMetrics>;\n}\n\nfunction keepFirst<Item>(keyed: Keyed<Item[]>): Keyed<Item> {\n  return Object.assign(\n    {},\n    ...Object.keys(keyed).map((key) => {\n      return { [key]: keyed[key][0] };\n    })\n  );\n}\n\ninterface KeyOnArgs<Key extends keyof Item, Item> {\n  key: Key;\n  items: Item[];\n}\n\nfunction keyOn<Key extends keyof Item, Item>(\n  args: KeyOnArgs<Key, Item>\n): Keyed<Item[]> {\n  let { key, items } = args;\n  let result = {} as Keyed<Item[]>;\n  for (let item of items) {\n    let keyVal = (item[key] as unknown) as string;\n    let list = result[keyVal];\n    if (!list) {\n      result[keyVal] = list = [];\n    }\n    list.push(item);\n  }\n  return result;\n}\n\nfunction fillDates({ dates, entries }: Data) {\n  for (let [name, points] of Object.entries(entries)) {\n    if (points.length !== dates.length) {\n      // We have the extra points to fill in.\n      let result = [];\n      let p = 0;\n      for (let date of dates) {\n        let point: Entry = points[p];\n        if (!point || point.date > date) {\n          // Missing, so fill in zeros.\n          point = Object.assign(\n            {},\n            ...Object.entries(points[0]).map(([key, value]) => {\n              if (key === \"date\") {\n                return { date };\n              } else {\n                return { [key]: typeof value === \"number\" ? 0 : value };\n              }\n            })\n          );\n          point.date = date;\n        } else {\n          // Already have a point for this date.\n          if (point.date !== date) {\n            // No details, so these can coallesce in the console.\n            // I only had these show up under a bug before, but I'd like to\n            // leave this around just in case.\n            console.warn(\"unrepresented date\");\n          }\n          p += 1;\n        }\n        // Whether the old point or new, we have something to add in.\n        result.push(point);\n      }\n      // Replace the entries with the full list.\n      entries[name] = result;\n    }\n  }\n}\n\nfunction normalize({ entries, sums }: Data) {\n  let keys = Object.keys(Object.values(sums)[0]).filter(\n    (key) => key !== \"date\"\n  ) as (keyof DateMetrics)[];\n  for (let points of Object.values(entries)) {\n    for (let point of points) {\n      let sum = sums[point.date];\n      for (let key of keys) {\n        (point[key] as number) =\n          (100 * (point[key] as number)) / (sum[key] as number);\n      }\n    }\n  }\n}\n\nfunction putMean({ entries, sums }: Data) {\n  let keys = Object.keys(Object.values(sums)[0]).filter(\n    (key) => key !== \"date\"\n  ) as (keyof DateMetrics)[];\n  for (let points of Object.values(entries)) {\n    for (let point of points) {\n      let sum = (keys.map((key) => point[key]) as number[]).reduce(\n        (x, y) => x + y,\n        0\n      );\n      point.mean = sum / keys.length;\n    }\n  }\n}\n\ninterface Table<Key extends keyof Item, Item> {\n  keys: Key[];\n  rows: Item[Key][][];\n}\n\nfunction tableToItems<Item, Key extends keyof Item>(\n  table: Table<Key, Item>\n): Item[] {\n  let { keys, rows } = table;\n  let items = rows.map((row) =>\n    Object.assign(\n      {},\n      ...keys.map((key, index) => {\n        return { [key]: row[index] };\n      })\n    )\n  ) as Item[];\n  return items;\n}\n\nexport interface Color {\n  hue: number;\n  saturation: number;\n}\n\nfunction chooseColor(name: string) {\n  // Use a handpicked seed that looks nice enough for the current top 10.\n  let hash = murmur3(name, 95);\n  let hue = (360 * ((hash >> 16) & 0xffff)) / 0xffff;\n  let saturation = 100 * (0.3 + (0.7 * (hash & 0xffff)) / 0xffff);\n  return formatColor({ hue, saturation });\n}\n\nfunction formatColor(color: Color) {\n  return `hsl(${color.hue}, ${color.saturation}%, 70%)`;\n}\n\nlet sums = keepFirst(\n  keyOn({\n    key: \"date\",\n    items: tableToItems(tables.sums as any) as DateMetrics[],\n  })\n);\nlet dates = Object.keys(sums).sort();\nlet entries = keyOn({\n  key: \"name\",\n  items: tableToItems(tables.items as any) as Entry[],\n});\nlet colors = Object.assign(\n  {},\n  ...Object.keys(entries).map((name) => {\n    return { [name]: chooseColor(name) };\n  })\n) as { [name: string]: string };\nlet data = { colors, dates, entries, sums };\n// Normalize and mean in advance.\nnormalize(data);\nputMean(data);\n// Fill in missing data here.\n// The idea is that this code is smaller than the compressed repeated zeros\n// would be in the preprocessed data -- and not too expensive to compute.\nfillDates(data);\n\nexport { colors, dates, entries, sums };\n","import { LangItemProps } from \"components/LangItem\";\nimport { objectEntries } from \"helpers\";\nimport { colors, entries, Metrics } from \"parsedData\";\nimport React, { useContext } from \"react\";\n\nconst defaultState = {\n  searchTerm: \"\",\n  trimmed: false,\n  metricsAreExpanded: false,\n  metric: \"mean\" as keyof Metrics,\n  langList: [] as Omit<\n    LangItemProps,\n    \"selected\" | \"onClick\" | \"onMouseOver\" | \"onMouseOut\"\n  >[],\n  selectedLangs: new Set<string>(),\n  highlighed: undefined as string | undefined,\n};\n\n// react context isnt very type-friendly, need to declare noops\nconst noopFuncs = {\n  updateSearchTerm(searchTerm: string) {},\n  toggleTrimmed() {},\n  toggleMetricsAreExpanded() {},\n  emptyList() {},\n  resetList() {},\n  changeMetric(metric: keyof Metrics) {},\n  toggleSelected(name: string) {},\n  setHighlighted(name?: string) {},\n};\n\nexport const GlobalContext = React.createContext({\n  ...defaultState,\n  ...noopFuncs,\n});\n\nexport const useGlobal = () => useContext(GlobalContext);\n\nexport class GlobalProvider extends React.Component<{}, typeof defaultState> {\n  state = defaultState;\n\n  constructor(props: {}) {\n    super(props);\n\n    // queuing because setState is asynchronous and each call depends on the previous one\n    queueMicrotask(() => {\n      this.constructList();\n      queueMicrotask(() => {\n        this.resetList();\n        queueMicrotask(() => this.loadUrlParams());\n      });\n    });\n  }\n\n  updateSearchTerm = (searchTerm: string) =>\n    this.setState({\n      searchTerm,\n      trimmed: false,\n    });\n\n  toggleTrimmed = () =>\n    this.setState((prevState) => ({\n      searchTerm: \"\",\n      trimmed: !prevState.trimmed,\n    }));\n\n  toggleMetricsAreExpanded = () =>\n    this.setState((prevState) => ({\n      metricsAreExpanded: !prevState.metricsAreExpanded,\n    }));\n\n  emptyList = () =>\n    this.setState((prevState) => {\n      prevState.selectedLangs.clear();\n      return prevState;\n    });\n\n  resetList = () =>\n    this.setState((prevState) => {\n      // mark top 10 as selected\n      prevState.selectedLangs.clear();\n\n      for (let i = 0; i < 10; i++) {\n        prevState.selectedLangs.add(this.state.langList[i].name);\n      }\n\n      return {\n        ...prevState,\n        searchTerm: \"\",\n      };\n    });\n\n  changeMetric = (metric: keyof Metrics) =>\n    this.setState({ metric }, this.constructList);\n\n  toggleSelected = (name: string) =>\n    this.setState((prevState) => {\n      if (prevState.selectedLangs.has(name)) {\n        prevState.selectedLangs.delete(name);\n      } else {\n        prevState.selectedLangs.add(name);\n      }\n      return { selectedLangs: prevState.selectedLangs };\n    });\n\n  // if nothing is passed, remove highlight\n  setHighlighted = (name?: string) => this.setState({ highlighed: name });\n\n  render = () => (\n    <GlobalContext.Provider\n      value={{\n        ...this.state,\n        updateSearchTerm: this.updateSearchTerm,\n        toggleTrimmed: this.toggleTrimmed,\n        toggleMetricsAreExpanded: this.toggleMetricsAreExpanded,\n        emptyList: this.emptyList,\n        resetList: this.resetList,\n        changeMetric: this.changeMetric,\n        toggleSelected: this.toggleSelected,\n        setHighlighted: this.setHighlighted,\n      }}\n    >\n      {this.props.children}\n    </GlobalContext.Provider>\n  );\n\n  private constructList() {\n    const getRanks = (offset = 1) => {\n      const counts = objectEntries(entries)\n        .map(([name, stats]) => ({\n          name,\n          value: stats.slice(-offset)[0][this.state.metric],\n        }))\n        .sort((a, b) => b.value - a.value);\n\n      let currRank: number;\n      const ranks = counts.map(({ name, value }, i) => {\n        let rank: number;\n\n        // edge case for first element\n        // if theres a tie, dont increment the rank\n        if (i === 0) {\n          rank = 1;\n        } else if (counts[i - 1].value === value) {\n          rank = currRank;\n        } else {\n          rank = currRank + 1;\n        }\n        currRank = rank;\n\n        return {\n          name,\n          rank,\n        };\n      });\n\n      return ranks;\n    };\n\n    const currentRanks = getRanks();\n    const oldRanks = getRanks(5);\n    const oldRanksMap: { [k: string]: number } = oldRanks.reduce(\n      (prev, curr) => ({ ...prev, [curr.name]: curr.rank }),\n      {}\n    );\n\n    const worstRank = Math.min(\n      oldRanks[oldRanks.length - 1].rank,\n      currentRanks[currentRanks.length - 1].rank\n    );\n\n    const langList = currentRanks.map((ele) => ({\n      ...ele,\n      color: colors[ele.name],\n      diff:\n        Math.min(oldRanksMap[ele.name], worstRank) -\n        Math.min(ele.rank, worstRank),\n    }));\n\n    this.setState({ langList });\n  }\n\n  private loadUrlParams() {\n    // do it only if theres any hash in uri\n    if (!window.location.hash) return;\n\n    const params = new URLSearchParams(window.location.hash.slice(1));\n\n    // set the url's metric only if it exists\n    const metric = params.get(\"y\");\n    if (metric) {\n      this.changeMetric(metric as keyof Metrics);\n    }\n\n    // set the names if they exist\n    const names = new Set(params.get(\"names\")?.split(\",\"));\n    if (names.size !== 0) {\n      this.emptyList();\n      // the search has to be done because the url stores the lower case version but the state requires the original name\n      for (const lang of this.state.langList) {\n        if (names.has(lang.name.toLowerCase())) {\n          this.toggleSelected(lang.name);\n        }\n      }\n    }\n\n    // clean up the hash after done loading\n    window.location.hash = \"\";\n\n    this.setState({ trimmed: true });\n  }\n}\n","import { useGlobal } from \"context\";\nimport React, { useState } from \"react\";\nimport \"styles/Header.css\";\n\nconst Header = () => {\n  const global = useGlobal();\n  const [showMessage, setShowMessage] = useState(false);\n\n  const copyLink = () => {\n    const params = new URLSearchParams();\n    const names = [...global.selectedLangs].map((name) => name.toLowerCase());\n    params.append(\"y\", global.metric);\n    params.append(\"names\", names.join(\",\"));\n\n    const url = new URL(window.location.href);\n    url.hash = String(params);\n\n    // using legacy way of copying because safari doesnt implement the new one\n    var textarea = document.createElement(\"textarea\");\n    textarea.textContent = String(url);\n    textarea.style.position = \"fixed\";\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textarea);\n\n    setShowMessage(true);\n    setTimeout(() => setShowMessage(false), 1000);\n  };\n\n  return (\n    <div className=\"header\">\n      <div>\n        <a\n          href=\"https://github.com/tjpalmer/languish\"\n          className=\"github-corner\"\n          title=\"View source and project info\"\n        >\n          <svg\n            width=\"80\"\n            height=\"80\"\n            viewBox=\"0 0 250 250\"\n            style={{\n              fill: \"#fff\",\n              color: \"#333\",\n              position: \"absolute\",\n              top: 0,\n              border: 0,\n              left: 0,\n              transform: \"scale(-1, 1)\",\n            }}\n            aria-hidden=\"true\"\n          >\n            <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n            <path\n              d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n              fill=\"currentColor\"\n              style={{ transformOrigin: \"130px 106px\" }}\n              className=\"octo-arm\"\n            ></path>\n            <path\n              d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n              fill=\"currentColor\"\n              className=\"octo-body\"\n            ></path>\n          </svg>\n        </a>\n      </div>\n      <h1>\n        <a href=\".\">Languish</a>\n      </h1>\n      <h2>\n        <div title=\"Current data from public GitHub projects\">\n          Programming Language Trends\n        </div>\n        <div>\n          ... for more,{\" \"}\n          <a\n            href=\"https://www.youtube.com/channel/UCS4FAVeYW_IaZqAbqhlvxlA\"\n            title=\"Context Free - YouTube channel about programming languages\"\n          >\n            subscribe to Context Free\n          </a>\n        </div>\n      </h2>\n      <div className=\"spread\"></div>\n      {showMessage && <div>Copied!</div>}\n      <div className=\"linkBox\">\n        <a\n          className=\"icolink link\"\n          href=\".\"\n          onClick={(e) => {\n            e.preventDefault();\n            copyLink();\n          }}\n          title=\"Permalink selections\"\n        >\n          <span className=\"icon-link-2\"></span>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { clx } from \"helpers\";\nimport React, { memo } from \"react\";\n\nconst customNames: { [key: string]: string } = {\n  raku: \"perl 6\",\n};\n\nconst customTopics: { [key: string]: string } = {\n  \"c++\": \"cpp\",\n  \"c#\": \"csharp\",\n  \"f#\": \"fsharp\",\n  \"f*\": \"fstar\",\n  \"objective-c++\": \"objective-cpp\",\n  \"perl 6\": \"perl6\",\n  \"ren'py\": \"renpy\",\n  \"visual basic .net\": \"visual-basic-net\",\n};\n\nexport interface LangItemProps {\n  rank: number;\n  color: string;\n  name: string;\n  diff: number;\n  onClick: (name: string) => void;\n  onMouseOver: (name: string) => void;\n  onMouseOut: () => void;\n  selected?: boolean;\n}\n\nconst LangItem: React.FC<LangItemProps> = memo(\n  ({ diff, name, rank, onClick, onMouseOver, onMouseOut, selected, color }) => {\n    const lowerCaseName = name.toLowerCase();\n    const customName = customNames[lowerCaseName] || lowerCaseName;\n    const customTopic =\n      customTopics[customName] || customName.replace(/ /g, \"-\");\n\n    return (\n      <tr\n        className=\"interactive\"\n        data-name={name}\n        onClick={() => onClick(name)}\n        onMouseOver={selected ? () => onMouseOver(name) : undefined}\n        onMouseOut={selected ? () => onMouseOut() : undefined}\n      >\n        <td\n          className={clx(\"marker\", selected && \"active\")}\n          style={selected ? { backgroundColor: color } : undefined}\n        >\n          {rank}\n        </td>\n        <td className=\"label\">\n          {name}\n          <div className=\"info\">\n            <a\n              className=\"icolink\"\n              target=\"__blank\"\n              href={`https://www.google.com/search?q=${encodeURIComponent(\n                lowerCaseName\n              )}%20language`}\n              title=\"Google Search\"\n            >\n              <span className=\"icon-google\"></span>\n            </a>\n            <a\n              className=\"icolink\"\n              href={`https://github.com/topics/${encodeURIComponent(\n                customTopic\n              )}?l=${encodeURIComponent(customName)}`}\n              title=\"GitHub Topic\"\n            >\n              <span className=\"icon-github\"></span>\n            </a>\n            <a\n              className=\"icolink\"\n              target=\"__blank\"\n              href={`https://github.com/trending/${encodeURIComponent(\n                customName\n              )}?since=daily`}\n              title=\"GitHub Trending\"\n            >\n              <span className=\"icon-trending-up\"></span>\n            </a>\n          </div>\n        </td>\n        <td className=\"change\" title=\"Change in rank vs 1 year earlier\">\n          {diff > 0 && \"+\"}\n          {diff !== 0 && diff}\n        </td>\n      </tr>\n    );\n  }\n);\n\nexport default LangItem;\n","import { useGlobal } from \"context\";\nimport { clx } from \"helpers\";\nimport React, { useLayoutEffect, useMemo, useRef } from \"react\";\nimport LangItem from \"./LangItem\";\n\nconst LangList = () => {\n  const global = useGlobal();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const langsToRender = useMemo(() => {\n    const lowerCaseSearchTerm = global.searchTerm.toLowerCase();\n\n    // if trimmed filter out the non-selected langs + those that do not match the query\n    if (global.trimmed) {\n      return global.langList.filter(\n        (lang) =>\n          global.selectedLangs.has(lang.name) &&\n          lang.name.toLowerCase().includes(lowerCaseSearchTerm)\n      );\n    }\n\n    // filter out those do not match the query\n    return global.langList.filter((lang) =>\n      lang.name.toLowerCase().includes(lowerCaseSearchTerm)\n    );\n  }, [\n    global.trimmed,\n    global.selectedLangs,\n    global.langList,\n    global.searchTerm,\n  ]);\n\n  // window wide event for query input\n  useLayoutEffect(() => {\n    const handleType = (event: KeyboardEvent) => {\n      // already focused on the input\n      if (event.target === inputRef.current) {\n        if (event.key === \"Escape\") {\n          global.updateSearchTerm(\"\");\n        }\n      } else {\n        event.preventDefault();\n        event.stopPropagation();\n        switch (event.key) {\n          case \"Backspace\":\n          case \"Delete\":\n          case \"Escape\":\n            global.updateSearchTerm(\"\");\n            break;\n          default:\n            // add the entered character if its alphanumeric, the rest will be handled by the input\n            if (/^[a-z0-9]$/i.test(event.key)) {\n              global.updateSearchTerm(event.key);\n            }\n        }\n\n        inputRef.current?.focus();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleType);\n\n    return () => window.removeEventListener(\"keydown\", handleType);\n  }, [global]);\n\n  return (\n    <div className=\"legend\">\n      <div className=\"list\">\n        <div className=\"listScroll\">\n          <div className=\"listBox\">\n            <table>\n              {langsToRender.map((lang) => (\n                <LangItem\n                  {...lang}\n                  key={lang.name}\n                  onClick={global.toggleSelected}\n                  onMouseOver={global.setHighlighted}\n                  onMouseOut={global.setHighlighted}\n                  selected={global.selectedLangs.has(lang.name)}\n                />\n              ))}\n            </table>\n          </div>\n        </div>\n      </div>\n      <div className=\"tools\">\n        <div\n          className=\"clear interactive\"\n          onClick={global.emptyList}\n          title=\"Clear all language selections\"\n        >\n          Empty\n        </div>\n        <div\n          className=\"reset interactive\"\n          onClick={global.resetList}\n          title=\"Reset to originally selected languages\"\n        >\n          Reset\n        </div>\n        <div\n          className={clx(\"trim interactive\", global.trimmed && \"checked\")}\n          onClick={global.toggleTrimmed}\n          title=\"Toggle showing selected vs all languages\"\n        >\n          Trim\n        </div>\n      </div>\n      <label className=\"query\">\n        <span\n          className={clx(\n            \"queryClear\",\n            global.searchTerm ? \"icon-close\" : \"icon-search\"\n          )}\n          onClick={() => global.updateSearchTerm(\"\")}\n        ></span>\n        <input\n          ref={inputRef}\n          title=\"Filter by name\"\n          value={global.searchTerm}\n          onChange={(e) => global.updateSearchTerm(e.target.value)}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default LangList;\n","import { useGlobal } from \"context\";\nimport { clx, objectEntries } from \"helpers\";\nimport { Metrics } from \"parsedData\";\nimport React from \"react\";\n\nconst Metric = () => {\n  const global = useGlobal();\n\n  // map of available metrics to human readable strings\n  const items: { [k in keyof Metrics]: string } = {\n    issues: \"Issues\",\n    mean: \"Mean Score\",\n    pulls: \"Pull Requests\",\n    pushes: \"Pushes\",\n    stars: \"Stars\",\n  };\n\n  return (\n    <>\n      <div className=\"yAxis\">\n        <div\n          className=\"yLabel interactive\"\n          title=\"Change y axis options\"\n          onClick={global.toggleMetricsAreExpanded}\n        >\n          <span className=\"yLabelArrow\"></span>{\" \"}\n          <span className=\"yLabelText\">{items[global.metric]}</span>{\" \"}\n          <span className=\"yLabelArrow\"></span>\n        </div>\n      </div>\n      <div className=\"yOptions\">\n        <div className=\"yOptionsBox\">\n          <h3>Metric</h3>\n          <ul className=\"yMetricsList\">\n            {objectEntries(items).map(([real, display]) => (\n              <li\n                onClick={() => global.changeMetric(real)}\n                className={clx(\n                  \"interactive\",\n                  real,\n                  global.metric === real && \"active\"\n                )}\n              >\n                {display}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Metric;\n","import { Chart, ChartColor, ChartDataSets } from \"chart.js\";\nimport { useGlobal } from \"context\";\nimport { colors, dates, entries, Metrics } from \"parsedData\";\nimport React, { useEffect, useLayoutEffect, useRef } from \"react\";\n\nfunction makeDataset(name: string, metric: keyof Metrics): ChartDataSets {\n  const borderColor = colors[name];\n\n  return {\n    borderColor,\n    cubicInterpolationMode: \"monotone\",\n    data: entries[name].map((entry) => entry[metric]),\n    fill: false,\n    hoverBorderColor: borderColor,\n    hoverBorderWidth: 6,\n    pointHoverBackgroundColor: borderColor,\n    label: name,\n    pointBackgroundColor: borderColor,\n  };\n}\n\nconst Plot = () => {\n  const global = useGlobal();\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const chart = useRef<Chart | undefined>();\n\n  // create Chart object once after first render\n  useLayoutEffect(() => {\n    if (!canvasRef.current) return;\n\n    const context = canvasRef.current.getContext(\"2d\")!;\n    chart.current = new Chart(context, {\n      data: {\n        datasets: [],\n        labels: dates,\n      },\n      options: {\n        animation: {\n          duration: 300,\n        },\n        hover: {\n          animationDuration: 200,\n          mode: \"dataset\",\n        },\n        legend: {\n          display: false,\n        },\n        maintainAspectRatio: false,\n        responsive: true,\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                callback: (date) => {\n                  return date.includes(\"Q1\") ? date.replace(\"Q1\", \"\") : \"\";\n                },\n                fontColor: \"white\",\n              },\n              // type: 'linear',\n            },\n          ],\n          yAxes: [\n            {\n              // scaleLabel: {display: true, labelString: 'Stars'},\n              ticks: {\n                callback: (value) => `${value}%`,\n                fontColor: \"white\",\n                suggestedMin: 0,\n              },\n            },\n          ],\n        },\n        tooltips: {\n          bodyFontSize: 18,\n          // I can't figure out how to remove the white border, but black here\n          // softens it some.\n          callbacks: {\n            label: (item, data) =>\n              `${data.datasets![item.datasetIndex!].label}: ` +\n              `${Number(item.value).toFixed(2)}%`,\n            labelColor: (item, chart) => {\n              let dataset = chart.data.datasets![item.datasetIndex!];\n              let color = dataset.borderColor as ChartColor;\n              return { borderColor: \"black\", backgroundColor: color };\n            },\n          },\n          // mode: 'x',  // Would need to highlight current and refine.\n          position: \"nearest\",\n          titleFontSize: 18,\n          titleFontStyle: \"normal\",\n        },\n      },\n      type: \"line\",\n    });\n  }, []);\n\n  // reset the data when metrics change\n  useEffect(() => {\n    if (chart.current?.data.datasets) {\n      chart.current.data.datasets = [];\n    }\n  }, [global.metric]);\n\n  // react to changed in the global state\n  useEffect(\n    () => {\n      if (!chart.current?.data.datasets) return;\n      // set of currently rendered sets\n      const available = new Set<string>();\n\n      // filter out old data\n      chart.current.data.datasets = chart.current.data.datasets.filter((e) => {\n        available.add(e.label || \"\");\n        return global.selectedLangs.has(e.label || \"\");\n      });\n      // add missing data\n      for (const name of global.selectedLangs) {\n        if (!available.has(name)) {\n          chart.current.data.datasets.push(makeDataset(name, global.metric));\n        }\n      }\n\n      chart.current.update();\n    },\n    // rule is disabled because global.selectedLangs never changes shallowly\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [global.metric, global.selectedLangs.size]\n  );\n\n  // update highlighted element\n  useEffect(() => {\n    if (!chart.current?.data.datasets) return;\n\n    for (const lang of chart.current.data.datasets) {\n      lang.borderWidth = lang.label === global.highlighed ? 9 : 3;\n    }\n\n    chart.current.update();\n  }, [global.highlighed]);\n\n  return (\n    <div className=\"plot\">\n      <div className=\"plotBox\">\n        <canvas ref={canvasRef}></canvas>\n      </div>\n      <div className=\"xAxis\">\n        <div className=\"xLabel interactive\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Plot;\n","import Header from \"components/Header\";\nimport LangList from \"components/LangList\";\nimport Metric from \"components/Metric\";\nimport Plot from \"components/Plot\";\nimport { useGlobal } from \"context\";\nimport { clx } from \"helpers\";\nimport React from \"react\";\n\nconst App = () => {\n  const global = useGlobal();\n\n  return (\n    <div className=\"content\">\n      <Header />\n      <div\n        className={clx(\n          \"display\",\n          global.metricsAreExpanded && \"yOptionsExpanded\"\n        )}\n      >\n        <Metric />\n        <Plot />\n        <LangList />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { GlobalProvider } from \"context\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <GlobalProvider>\n    <App />\n  </GlobalProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}